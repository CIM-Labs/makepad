use makepad_render::{Component, Frame, DrawQuad};

DrawQuad: Shader{
    use crate::shader_std::prelude::*;
        
    default_geometry: crate::shader_std::quad_2d;
    geometry geom: vec2;
    varying pos: vec2;
    
    draw_input: self::DrawQuad;
    
    //let dpi_dilate: float<Uniform>;
    fn scroll() -> vec2 {
        return draw_scroll.xy;
    }
    
    fn vertex() -> vec4 {
        let scr = scroll();
        
        let clipped: vec2 = clamp(
            geom * rect_size + rect_pos - scr,
            draw_clip.xy,
            draw_clip.zw
        );
        pos = (clipped + scr - rect_pos) / rect_size;
        // only pass the clipped position forward
        return camera_projection * (camera_view * (view_transform * vec4(
            clipped.x,
            clipped.y,
            draw_depth + draw_zbias,
            1.
        )));
    }
    
    fn pixel() -> vec4 {
        return #0f0;
    }
}

DrawNormalButton: DrawQuad { // compiled to shader on platform layer (metal, webgl, dx11, etc)
    // default values for the shader
    hover: 0.0,
    down: 0.0,

    shadow: 3.0;
    border_radius: 2.5;
    
    fn pixel() -> vec4 {
        let cx = Df::viewport(pos * rect_size);
        cx.box(shadow, shadow, rect_size.x - shadow * (1. + down), rect_size.y - shadow * (1. + down), border_radius);
        cx.blur = 6.0;
        cx.fill(mix(#0007, #0, hover));
        cx.blur = 0.001;
        cx.box(shadow, shadow, rect_size.x - shadow * 2., rect_size.y - shadow * 2., border_radius);
        return cx.fill(mix(mix(#3, #4, hover), #2a, down));
    }
}

Align: Struct{
    Center: Self{fx:0.5,fy:0.5}
}

Width : Enum{}

NormalButton: Component{
    layout_bg: Layout {
        align: Align::Center, 
        walk: Walk {
            width: Width::Compute,
            height: Height::Compute,
            margin: Margin{l:1.0, t:1.0, r:1.0, b:1.0},
        },
        padding: Padding{l: 16.0, t: 12.0, r: 16.0, b: 12.0},
    }
    
    bg: DrawNormalButton { // shaders behave as classes and can be partially overwritten here
         border_radius: 5.5;
    }
    
    text: DrawText{
        text_style:DefaultTextStyle{}
    }
    
    Default: Self { // shows states as instances of self
        shader.down: 0.0
        layout_bg.padding.l: Animation { // all properties can have animation
            play: Play::Cut {duration: 0.1}
            keys: {1.0: 10.0}
        }
        frame.prop: 1.0
    }
    
    Pressed: Self{ // todo: find a way to 'tween' these 2 states
        shader.down: 1.0
    }
}

MyFrame: Frame { // something that layouts / clips
    pos: Vec3{x: 1.0, y: 1.0, z: 1.0}
    size: Vec2{x: 100.0, y: 100.0}
    layout: Layout::Auto {}
    children: [button1, user1, button2]

    // loop this thing somehow
    button1: NormalButton {
        label: "testword"
        layout_bg.padding.l: 1.0 // deep propery overwrites
    }
    button2: NormalButton{
        label: "testword2"
        layout_bg.padding.l: 3.0
    }
    user1: UserDraw{}
}